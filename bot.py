#encoding: UTF-8
import json
import requests
import time
from datetime import datetime
import urllib
import psycopg2
import os
import telepot



os.environ['DATABASE_URL'] = 'postgres://aszcitgpnlvywd:724a92d4dd1cdb044882cb6f579060b8482e7da45191194cf9b5c7677bc9f210@ec2-54-247-81-88.eu-west-1.compute.amazonaws.com:5432/dfq1utl6uns158'

DATABASE_URL = os.environ['DATABASE_URL']
conn = psycopg2.connect(DATABASE_URL, sslmode='require')


TOKEN = '577877864:AAEh1MKE62KPntQjSuEtH53sDYJDes3oYyM'
URL = "https://api.telegram.org/bot{}/".format(TOKEN)

PORT = int(os.environ.get('PORT', '8443'))

TelegramBot = telepot.Bot(TOKEN)


def get_url(url):
    response = requests.get(url)
    content = response.content.decode("utf8")
    return content


def get_json_from_url(url):
    content = get_url(url)
    js = json.loads(content)
    return js


def get_updates(offset=None):
    url = URL + "getUpdates"
    if offset:
        url += "?offset={}".format(offset)
    js = get_json_from_url(url)
    return js


def get_last_update_id(updates):
    update_ids = []
    for update in updates["result"]:
        update_ids.append(int(update["update_id"]))
    return max(update_ids)


def echo_all(updates):
    for update in updates["result"]:
        text = update["message"]["text"]
        text = text.lower()

        chat = update["message"]["chat"]["id"]

        id = update['message']['chat']['id']
        name =  update['message']['chat']['first_name']

        if text == '/start':
            text = '–¢–µ–±–µ –≤—ñ—Ç–∞—î NewsKit!'
            send_message(text, chat)

            #text = str([update['message']['chat']['id'], update['message']['chat']['first_name']])
            curs = conn.cursor()
            curs.execute("SELECT * FROM users WHERE telegram_id ='{}' AND name ='{}'".format(id, name))
            user = curs.fetchone()
            if not user:
                curs.execute("INSERT INTO users (telegram_id, name, keywords, send_time, status) VALUES ('{}', '{}', '', '{}', 0)".format(id, name, datetime.now()))
                send_message('–¢–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö!', chat)
                conn.commit()
            send_message('–ï—Ç–∞–ø —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ–π–¥–µ–Ω–∏–π! –£—Ä–∞!', chat)
            #send_message(text, chat)
            send_help(text, chat)
        elif text.startswith('/keywords') or text.startswith('/add') or text.startswith('/–¥–æ–¥–∞–π') or text.startswith('–∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:'):
            if text.startswith('–∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:'):
                text = text.split(' ')
                text.pop(0)
                text.pop(0)
            else:
                text = text.split(' ')
                text.pop(0)
            curs = conn.cursor()
            curs.execute("SELECT keywords FROM users WHERE telegram_id ='{}' AND name ='{}'".format(id, name))
            present_words = curs.fetchone()[0]
            present_words_list = present_words.split(', ')
            present_words_list = remove_bad_characters(present_words_list)

            text = remove_bad_characters(text)
            print(text)
            #text consists of received list of new keywords

            # loop for detecting repeating keywords
            isgoingtoberemoved = []
            for word in text:
                if word in present_words_list:
                    send_message(str(word + ' –Ω–µ –¥–æ–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä'), chat)
                    isgoingtoberemoved.append(word)
                else:
                    send_message(str(word + ' –¥–æ–¥–∞–Ω–æ'), chat)

            #loop for removing this repeating elements
            for repeated in isgoingtoberemoved:
                text.remove(repeated)


            if len(text) != 0:
                text = ', '.join(text)
            else:
                text = ''.join(text)
            #send_message(present_words_list, chat)
            if len(present_words_list) == 1 and present_words_list[0] == '':
                present_words_list = ''.join(present_words_list)
            else:
                present_words_list = ', '.join(present_words_list)
                if text != '':
                    present_words_list = present_words_list + ', '

            if present_words != '':
                present_words = present_words + ', '
            curs.execute("UPDATE users SET keywords ='{}' WHERE telegram_id ='{}' AND name ='{}'".format(str(present_words_list + text), id, name))
            conn.commit()
            send_message('–í–∞—à —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤: ' + str(present_words_list + text), chat)
        elif text.startswith('/deletekeywords') or text.startswith('/remove') or text.startswith('/–≤–∏–ª—É—á–∏') or text.startswith('–≤–∏–¥–∞–ª–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:') or text.startswith('–≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:'):
            if text.startswith('–≤–∏–¥–∞–ª–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:') or text.startswith('–≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:'):
                text = text.split(' ')
                text.pop(0)
                text.pop(0)
                text.pop(0)
            else:
                text = text.split(' ')
                text.pop(0)
            text = remove_bad_characters(text)
            curs = conn.cursor()
            curs.execute("SELECT keywords FROM users WHERE telegram_id ='{}' AND name ='{}'".format(id, name))
            present_words = curs.fetchone()[0]
            present_words_list = present_words.split(', ')
            present_words_list = remove_bad_characters(present_words_list)

            #loop for removing chosen elements
            for should_remove in text:
                if should_remove in present_words_list:
                    present_words_list.remove(should_remove)
                    send_message(str(should_remove + ' –≤–∏–ª—É—á–µ–Ω–æ'), chat)
                else:
                    send_message(str(should_remove + ' –Ω–µ —î —Ç–≤–æ—ó–º –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º'), chat)

            if len(present_words_list) == 1 and present_words_list[0] == '':
                present_words_list = ''.join(present_words_list)
            else:
                present_words_list = ', '.join(present_words_list)

            curs.execute("UPDATE users SET keywords ='{}' WHERE telegram_id ='{}' AND name ='{}'".format(str(present_words_list), id, name))
            conn.commit()
            send_message('–í–∞—à —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤: ' + str(present_words_list), chat)

        elif text == '/deleteaccount' or text.startswith('/deleteacc') or text.startswith('–≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç'):
            curs = conn.cursor()
            curs.execute("DELETE FROM users WHERE telegram_id ='{}' AND name ='{}'".format(id, name))
            conn.commit()

            text = '–¢–∏ –±—ñ–ª—å—à–µ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à —â–æ–¥–µ–Ω–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫(( –©–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ü—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ /start'
            send_message(text, chat)
        elif text == '/stop' or text.startswith('stop') or text.startswith('—Å—Ç–æ–ø') or text.startswith('—Å—Ç—ñ–π'):
            curs = conn.cursor()
            curs.execute("SELECT status FROM users WHERE telegram_id ='{}' AND name ='{}'".format(id, name))
            status = int(curs.fetchone()[0])
            if status != 1:
                curs.execute("UPDATE users SET status = 1 WHERE telegram_id ='{}' AND name ='{}'".format(id, name))
                conn.commit()
                text = '–¢–∏ –±—ñ–ª—å—à–µ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à —â–æ–¥–µ–Ω–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫(( –©–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ü—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ /renew'
            else:
                text = '–¢–∏ –≤–∂–µ –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω —Ä–∞–Ω—ñ—à–µ(( –©–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ü—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ /renew'

            send_message(text, chat)

        elif text == '/renew' or text == 'renew' or text.startswith('–≤—ñ–¥–Ω–æ–≤–∏—Ç–∏'):
            curs = conn.cursor()
            curs.execute("SELECT status FROM users WHERE telegram_id ='{}' AND name ='{}'".format(id, name))
            status = int(curs.fetchone()[0])
            if status != 0:
                curs.execute("UPDATE users SET status = 0 WHERE telegram_id ='{}' AND name ='{}'".format(id, name))
                conn.commit()
                text = '–¢–∏ –∑–Ω–æ–≤—É –∑—ñ –º–Ω–æ—é! –¢–µ–ø–µ—Ä —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à —â–æ–¥–µ–Ω–Ω—É –ø—ñ–¥–±—ñ—Ä–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω! –ì—ñ–ø-–≥—ñ–ø –£–†–ê!üòç))'
            else:
                text = '–¢–∏ –≤–∂–µ –ø–æ–≥–æ–¥–∏–≤—Å—è –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω —Ä–∞–Ω—ñ—à–µ! –î—è–∫—É—é –∑–∞ –¥–æ–≤—ñ—Ä—É!'

            send_message(text, chat)
        elif text == '/help' or text.startswith('help') or text.startswith('–¥–æ–ø–æ–º–æ–≥–∞'):
             send_help(text, chat)
        else:
            send_message(text, chat)

def remove_bad_characters(list):
    list = [s.replace(',', '') for s in list]
    list = [s.replace(' ', '') for s in list]
    list = [s.replace(':', '') for s in list]
    list = [s.replace(";", '') for s in list]
    list = [s.replace('!', '') for s in list]
    list = [s.replace("'", '') for s in list]
    list = [s.replace("[", '') for s in list]
    list = [s.replace("]", '') for s in list]
    list = [s.replace("{", '') for s in list]
    list = [s.replace("}", '') for s in list]
    list = [s.replace("-", '') for s in list]
    list = [s.replace("_", '') for s in list]
    list = [s.replace("=", '') for s in list]
    list = [s.replace("+", '') for s in list]
    list = [s.replace("|", '') for s in list]
    list = [s.replace("(", '') for s in list]
    list = [s.replace(")", '') for s in list]
    list = [s.replace("*", '') for s in list]
    list = [i for n, i in enumerate(list) if i not in list[n + 1:]] #remove repeating
    print(list)
    return list

def get_last_chat_id_and_text(updates):
    num_updates = len(updates["result"])
    last_update = num_updates - 1
    text = updates["result"][last_update]["message"]["text"]
    chat_id = updates["result"][last_update]["message"]["chat"]["id"]
    return (text, chat_id)


def send_message(text, chat_id):
    text = urllib.parse.quote_plus(text)
    url = URL + "sendMessage?text={}&chat_id={}".format('(—Ö–µ—Ä–æ–∫—É) ' + text, chat_id)
    get_url(url)

def send_help(text, chat_id):
    text = ' –Ø —î —á–∞—Ç-–±–æ—Ç–æ–º, —è–∫–∏–π –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ —Ç–æ–±—ñ –ø—ñ–¥–±—ñ—Ä–∫—É —Å–≤—ñ–∂–∏—Ö —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω —É –∑—Ä—É—á–Ω–∏–π —á–∞—Å –∑ –æ–±—Ä–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω–Ω–∏—Ö –≤–µ–±-—Å–∞–π—Ç—ñ–≤.\n \n <code>–£–≤–∞–≥–∞! –Ø –ø–æ–∫–∏ –∑–Ω–∞—Ö–æ–¥–∂—É—Å—å –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ —ñ —Ç–∏ –∫–æ—Ä–∏—Å—Ç—É—î—à—Å—è MVP (–Ω–∞–π–º–µ–Ω—à–æ—é —Ä–æ–±–æ—á–æ—é –≤–µ—Ä—Å—ñ—î—é), —Ç–æ–º—É –ø–æ–∫–∏ —è –ø—ñ–¥—Ç—Ä–∏–º—É—é –ª–∏—à–µ 1 –Ω–æ–≤–∏–Ω–Ω–∏–π —Å–∞–π—Ç. –ß–µ–∫–∞–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ! </code> \n \n –í–∏—è–≤–ª–µ–Ω—ñ –±–∞–≥–∏ –Ω–∞–¥—Å–∏–ª–∞–π –¥–æ <a href="https://www.facebook.com/dmytro.lopushanskyy">–î–º–∏—Ç—Ä–∞ –õ–æ–ø—É—à–∞–Ω—Å—å–∫–æ–≥–æ</a> –∞–±–æ <a href="https://www.facebook.com/mlastovski">–ú–∞—Ä–∫–∞ –õ–∞—Å—Ç–æ–≤—Å—å–∫–æ–≥–æ</a> \n \n <b>–ê–ª–≥–æ—Ä–∏—Ç–º:</b> 1) –¢–∏ –ø–∏—à–µ—à –º–µ–Ω—ñ —Å–≤–æ—ó –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ 2) –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑\'—è–≤–ª—è—î—Ç—å—Å—è –Ω–æ–≤–∞ —Å—Ç–∞—Ç—Ç—è –Ω–∞ —Å–∞–π—Ç—ñ <a href="http://24tvua.com/">24 –ö–∞–Ω–∞–ª—É</a>, —è–∫–∞ –ø—ñ–¥—ñ–π–¥–µ —Ç–æ–±—ñ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —Ç–æ —è –æ–¥—Ä–∞–∑—É –Ω–∞–¥—ñ—à–ª—é –≤ —Ü–µ–π —á–∞—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—ó!  \n \n <i>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É:</i> \n \n<b>–ü–æ—á–∞—Ç–æ–∫</b> \n  /start - –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ \n \n <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤</b> \n /keywords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3 \n /add —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3 \n –î–æ–¥–∞–π: —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3 \n –ö–ª–æ—á–æ–≤—ñ —Å–ª–æ–≤–∞: —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3 \n \n <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤</b> \n /deletekeywords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3 \n /remove —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3 \n –í–∏–ª—É—á–∏: —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3 \n –í–∏–¥–∞–ª–∏ –∫–ª–æ—á–æ–≤—ñ —Å–ª–æ–≤–∞: —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3 \n \n <b>–ü—Ä–∏–ø–∏–Ω–∏—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω</b> \n /stop \n —Å—Ç–æ–ø \n stop \n \n <b>–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω</b> \n /renew \n renew \n –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ \n \n  <b>–í–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–∞</b> \n /deleteacc \n –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç' + \
             '\n \n <b>–î–æ–ø–æ–º–æ–≥–∞</b> \n /help \n help \n –¥–æ–ø–æ–º–æ–≥–∞ '

    send_message_html(text, chat_id)

def send_message_html(text, chat_id):
    TelegramBot.sendMessage(chat_id, text, parse_mode = 'HTML')



def main():
    last_update_id = None
    while True:
        updates = get_updates(last_update_id)
        if len(updates["result"]) > 0:
            last_update_id = get_last_update_id(updates) + 1
            echo_all(updates)
        time.sleep(0.5)


if __name__ =='__main__':
    main()
